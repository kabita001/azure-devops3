name: Build and Deploy

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: DockerHub login
        run: echo "${{secrets.DOCKER_TOKEN}}" | docker login -u "${{secrets.DOCKER_USERNAME}}" --password-stdin

      - name: Build and push docker image to Dockerhub
        run: |
          docker build -t kabita0009/azure_devops:${{ github.sha }} . -t kabita0009/azure_devops:latest
          docker push kabita0009/azure_devops:${{ github.sha }}
          docker push kabita0009/azure_devops:latest

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform init
        env:
          TF_VAR_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: terraform init

      - name: Terraform plan
        env:
          TF_VAR_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          terraform plan -input=false

      - name: Terraform apply
        env:
          TF_VAR_ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          TF_VAR_ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          TF_VAR_ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          TF_VAR_ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        run: |
          az login --service-principal --username $TF_VAR_ARM_CLIENT_ID --password $TF_VAR_ARM_CLIENT_SECRET --tenant $TF_VAR_ARM_TENANT_ID
          terraform import -input=false azurerm_resource_group.resource_group /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/azure_devops_resource_group
          terraform import -input=false azurerm_kubernetes_cluster.aks_cluster /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/azure_devops_resource_group/providers/Microsoft.ContainerService/managedClusters/azure-devops-aks-cluster
          terraform apply -input=false -auto-approve

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4

      - name: Get credentials from Kubernetes
        run: |
          az aks get-credentials --resource-group azure_devops_resource_group --name azure-devops-aks-cluster  

      - name: Deploy to Kubernetes
        run: |
          kubectl apply -f appPodAndService.yaml
          kubectl apply -f elasticPodAndService.yaml
          kubectl apply -f kibanaPodAndService.yaml
